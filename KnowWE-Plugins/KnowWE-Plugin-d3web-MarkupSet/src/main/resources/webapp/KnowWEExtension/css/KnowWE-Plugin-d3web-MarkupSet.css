.lineerror {
	background: #FFF6BF;
}

.cellerror {
	background: #FFF6BF;
}

.ruleDebugView .d3webRule > span {
	line-height: 40px;
}

.ruleDebugView .Condition > span {
	line-height: 40px;
}

.RuleAction {
	display: inline-block;
}

.type_ShowSolutions ul.grouped-solutions {
	list-style-type: none;
}

.type_plugin-config .markupIcon {
	height: 28px;
}

/* -- IfCondition/Condition -- */

.IfCondition {
	background-color: inherit;
}

.ruleDebugView .ruleDebug .IfCondition {
	padding: 8px 0 8px 0;
}

/* - condition evaluation - */
/* comments are excluded from rendering */

.conditionTrue > *:not(.comment),
.CompositeCondition.conditionTrue,
.TerminalCondition.conditionTrue,
.RuleAction.conditionTrue {
	background-color: var(--text-color-condition-fulfilled);
}

.dark-mode .conditionTrue > *:not(.comment),
.dark-mode .CompositeCondition.conditionTrue,
.dark-mode .TerminalCondition.conditionTrue,
.dark-mode .RuleAction.conditionTrue {
	background-color: transparent;
	border-bottom: solid var(--text-color-condition-fulfilled);
}

.dark-mode .style-condition-false .conditionTrue > *:not(.comment),
.dark-mode .style-condition-false .CompositeCondition.conditionTrue,
.dark-mode .style-condition-false .TerminalCondition.conditionTrue,
.dark-mode .style-condition-false .RuleAction.conditionTrue {
	background-color: transparent;
	border-bottom: none;
}

.conditionFalse > *:not(.comment),
.CompositeCondition.conditionFalse,
.TerminalCondition.conditionFalse,
.RuleAction.conditionFalse {
	background-color: var(--text-color-condition-false);
}

.dark-mode .style-condition-false .conditionFalse > *:not(.comment),
.dark-mode .style-condition-false .CompositeCondition.conditionFalse,
.dark-mode .style-condition-false .TerminalCondition.conditionFalse,
.dark-mode .style-condition-false .RuleAction.conditionFalse {
	background-color: transparent;
	border-bottom: none;
}

.dark-mode .conditionFalse > *:not(.comment),
.dark-mode .CompositeCondition.conditionFalse,
.dark-mode .TerminalCondition.conditionFalse,
.dark-mode .RuleAction.conditionFalse {
	background-color: transparent;
	border-bottom: solid var(--text-color-condition-false);
}

.conditionUnknown > *:not(.comment),
.CompositeCondition.conditionUnknown,
.TerminalCondition.conditionUnknown,
.RuleAction.conditionUnknown {
	background-color: #CFD5FF;
}

.dark-mode .conditionUnknown > *:not(.comment),
.dark-mode .CompositeCondition.conditionUnknown,
.dark-mode .TerminalCondition.conditionUnknown,
.dark-mode .RuleAction.conditionUnknown {
	background-color: transparent;
	border-bottom: solid #CFD5FF;
}

.conditionUndefined {
	background-color: inherit;
}

/* - CompositeConditions - */

/* always the outermost condition*/
.ruleDebugView .CompositeCondition {
	/*in some cases the padding would have been overwritten by its children*/
	padding: 8px 0 8px 0 !important;
}

.ruleDebugView .BracedCondition {
	padding: 4px 0 4px 0;
}

.ruleDebugView .Conjunction {
	padding: 4px 0 4px 0;
}

.ruleDebugView .Disjunction {
	padding: 4px 0 4px 0;
}

/* -- ThenAction -- */

.ThenAction {
	background-color: inherit;
}

.ruleDebugView .ThenAction {
	padding: 8px 0 8px 0;
}

/* -- Exceptions -- */

.exceptTrue .ExceptionCondition {
	background-color: var(--bg-color-true);
}

.exceptFalse .ExceptionCondition {
	background-color: var(--bg-color-false);
}

.exceptUnknown .ExceptionCondition {
	background-color: var(--bg-color-unknown);
}

.elseFired .ElseAction {
	background-color: var(--bg-color-fired);
}

.unknownFired .UnknownAction {
	background-color: var(--bg-color-fired);
}

.exceptTrue .UnknownAction {
	background-color: transparent !important;
}

/* -- mouse-over border highlighting -- */

/* borders have slightly different colors from their corresponding condition highlighters,
to make the distinction between border and underlying color easier */

.BracedCondition.conditionTrue.hoverIntent,
.CompositeCondition.conditionTrue.hoverIntent {
	border: 1px solid limegreen;
}

.BracedCondition.conditionFalse.hoverIntent,
.CompositeCondition.conditionFalse.hoverIntent {
	border: 1px solid indianred;
}

.BracedCondition.conditionUnknown.hoverIntent,
.CompositeCondition.conditionUnknown.hoverIntent {
	border: 1px solid cornflowerblue;
}
